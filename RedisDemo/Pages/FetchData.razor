@page "/fetchdata"

@using RedisDemo.Data
@using RedisDemo.Extensions
@inject WeatherForecastService ForecastService
@inject IDistributedCache cache

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<button class="btn btn-primary" @onclick="LoadForest">Load Foreast</button>

<button class="btn btn-dark" @onclick="RefreshData">RefreshData</button>

@if (forecasts is null && loadLocation is null)
{
    <p><em>Click the button to load the foreast</em></p>
}
else if(forecasts is null )
{
<p><em>로딩중</em></p>
}
else
{
<p><em>@RefreshTime</em></p>
<div class="h3 @isCacheData">
    @loadLocation
</div>
<p><em>@recordKey</em></p>
<table class="tab
       le">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private WeatherForecast[] forecasts;

    private string loadLocation = "";
    private string isCacheData = "";
    private string RefreshTime = "";
    string recordKey = "WeatherForeacast_" + DateTime.Now.ToString("yyyyMMdd_hhmm");

    private async Task LoadForest()
    {
        forecasts = null;
        loadLocation = null;
        //recordKey = "WeatherForeacast_" + DateTime.Now.ToString("yyyyMMdd_hhmm");
        RefreshTime = DateTime.Now.ToString("hh:mm:ss");

        forecasts = await cache.GetRecordAsync<WeatherForecast[]>(recordKey);
        if (forecasts is null)
        {
            forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
            loadLocation = $"Loaded from API at {DateTime.Now}";
            isCacheData = "";
            await cache.SetRecordAsync(recordKey, forecasts);
        }
        else
        {
            loadLocation = $"Loaded From the Cache at {DateTime.Now}";
            isCacheData = "text-danger";
        }
    }

    private async Task RefreshData()
    {
        //recordKey = "WeatherForeacast_" + DateTime.Now.ToString("yyyyMMdd_hhmm");
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        await cache.SetRecordAsync(recordKey, forecasts);
    }


    //protected override async Task OnInitializedAsync()
    //{
    //    forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    //}
}
